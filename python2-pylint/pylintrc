# This file should contain any COzero defaults that differ from Pylint's standard config.

[MASTER]

[MESSAGES CONTROL]

# TODO: remove cyclic-import.
disable =
    cyclic-import,
    fixme,
    import-error,
    locally-disabled,
    locally-enabled,
    no-member,
    no-name-in-module,
    no-self-use,
    super-on-old-class,
    too-many-arguments,
    too-many-function-args,

[REPORTS]

# Tells whether to display a full report or only the messages
# DEFAULT:  reports=yes
# RATIONALE:  run from Travis / tox, and don't need / want to parse output.
reports=no

[SIMILARITIES]

# Minimum lines number of a similarity.
# DEFAULT:  min-similarity-lines=4
min-similarity-lines=15

# Ignore imports when computing similarities.
# DEFAULT:  ignore-imports=no
ignore-imports=yes

[VARIABLES]

# A regular expression matching the name of dummy variables (i.e. expectedly
# not used).
dummy-variables-rgx=^\*{0,2}(_$|unused_|dummy_)

[LOGGING]

[FORMAT]

# Maximum number of characters on a single line.
# DEFAULT:  
max-line-length=80

# List of optional constructs for which whitespace checking is disabled
# DEFAULT:  no-space-check=trailing-comma,dict-separator
# RATIONALE: pylint ignores whitespace checks around the
#            constructs "dict-separator" (cases like {1:2}) and
#            "trailing-comma" (cases like {1: 2, }).
#            By setting "no-space-check" to empty whitespace checks will be
#            enforced around both constructs.
no-space-check =

# Maximum number of lines in a module
# DEFAULT:  max-module-lines=1000
max-module-lines=1500

[MISCELLANEOUS]

[BASIC]

# Regular expression which should only match function or class names that do
# not require a docstring.
# DEFAULT:  no-docstring-rgx=__.*__
no-docstring-rgx=(__.*__|main)

# Minimum line length for functions/classes that require docstrings, shorter
# ones are exempt.
# DEFAULT:  docstring-min-length=-1
docstring-min-length=10

# Regular expression which should only match correct module names. The
# leading underscore is sanctioned for private modules by Google's style
# guide.
module-rgx=^(_?[a-z][a-z0-9_]*)|__init__$

# Regular expression matching correct constant names
# DEFAULT:  const-rgx=(([A-Z_][A-Z0-9_]*)|(__.*__))$
const-rgx=^(_?[A-Z][A-Z0-9_]*|__[a-z0-9_]+__|_?[a-z][a-z0-9_]*)$

# Regular expression matching correct class attribute names
# DEFAULT:  class-attribute-rgx=([A-Za-z_][A-Za-z0-9_]{2,30}|(__.*__))$
class-attribute-rgx=^(_?[A-Z][A-Z0-9_]*|__[a-z0-9_]+__|_?[a-z][a-z0-9_]*)$

# Regular expression matching correct class names
# DEFAULT:  class-rgx=[A-Z_][a-zA-Z0-9]+$
class-rgx=^_?[A-Z][a-zA-Z0-9]*$

# Regular expression which should only match correct function names.
# 'camel_case' and 'snake_case' group names are used for consistency of naming
# styles across functions and methods.
function-rgx=^(?:(?P<camel_case>_?[A-Z][a-zA-Z0-9]*)|(?P<snake_case>_?[a-z][a-z0-9_]*))$

# Regular expression which should only match correct method names.
# 'camel_case' and 'snake_case' group names are used for consistency of naming
# styles across functions and methods. 'exempt' indicates a name which is
# consistent with all naming styles.
method-rgx=^(?:(?P<exempt>__[a-z0-9_]+__|next)|(?P<camel_case>_{0,2}[A-Z][a-zA-Z0-9]*)|(?P<snake_case>_{0,2}[a-z][a-z0-9_]*))$

# Regular expression matching correct attribute names
# DEFAULT:  attr-rgx=[a-z_][a-z0-9_]{2,30}$
attr-rgx=^_{0,2}[a-z][a-z0-9_]*$

# Regular expression matching correct argument names
# DEFAULT:  argument-rgx=[a-z_][a-z0-9_]{2,30}$
argument-rgx=^[a-z][a-z0-9_]*$

# Regular expression matching correct variable names
# DEFAULT:  variable-rgx=[a-z_][a-z0-9_]{2,30}$
variable-rgx=^[a-z][a-z0-9_]*$

# Regular expression matching correct inline iteration names
# DEFAULT:  inlinevar-rgx=[A-Za-z_][A-Za-z0-9_]*$
inlinevar-rgx=^[a-z][a-z0-9_]*$

# Good variable names which should always be accepted, separated by a comma
# DEFAULT:  good-names=i,j,k,ex,Run,_
good-names=main,_

# Bad variable names which should always be refused, separated by a comma
# DEFAULT:  bad-names=foo,bar,baz,toto,tutu,tata
bad-names=

# List of builtins function names that should not be used, separated by a comma
# <http://go/python-style#Deprecated_Language_Features>
bad-functions=input,apply,reduce

[TYPECHECK]

[IMPORTS]

[CLASSES]

[DESIGN]

# Maximum number of arguments for function / method
# DEFAULT:  max-args=5
# RATIONALE:  API-mapping
max-args = 14

# Maximum number of locals for function / method body
# DEFAULT:  max-locals=15
max-locals=24

# Maximum number of return / yield for function / method body
# DEFAULT:  max-returns=6
max-returns=9

# Maximum number of branch for function / method body
# DEFAULT:  max-branches=12
max-branches=21

# Maximum number of attributes for a class (see R0902).
# DEFAULT:  max-attributes=7
# RATIONALE:  API mapping
max-attributes=19

# Minimum number of public methods for a class (see R0903).
# DEFAULT:  min-public-methods=2
# RATIONALE:  context mgrs may have *no* public methods
min-public-methods=0

# Maximum number of public methods for a class (see R0904).
# DEFAULT:  max-public-methods=20
# RATIONALE:  API mapping
max-public-methods=40

[ELIF]

max-nested-blocks=6

[EXCEPTIONS]
